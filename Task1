'''Task: 1 - DATA PROCESSING ~ This task involves cleaning, transforming, and preparing raw data for AI model training.'''

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler

# Load the Titanic dataset
data = pd.read_csv('train.csv')

# Display the first few rows of the dataset
print(data.head())

# Check for missing values
print(data.isnull().sum())

# Fill missing values
data['Age'].fillna(data['Age'].median(), inplace=True)
data['Embarked'].fillna(data['Embarked'].mode()[0], inplace=True)
data['Cabin'].fillna('Unknown', inplace=True)

# Extract the title from the 'Name' column *before* dropping it
data['Title'] = data['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())

# Drop columns with too many missing values or that won't be used
data.drop(['PassengerId', 'Name', 'Ticket'], axis=1, inplace=True) # Now you can safely drop 'Name'

# Create new feature 'FamilySize'
data['FamilySize'] = data['SibSp'] + data['Parch'] + 1

# Drop the 'SibSp' and 'Parch' columns
data.drop(['SibSp', 'Parch'], axis=1, inplace=True)

# Simplify the titles
data['Title'] = data['Title'].replace(['Lady', 'the Countess', 'Countess', 'Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')
data['Title'] = data['Title'].replace('Mlle', 'Miss')
data['Title'] = data['Title'].replace('Ms', 'Miss')
data['Title'] = data['Title'].replace('Mme', 'Mrs')

# Encode categorical variables
labelencoder = LabelEncoder()
data['Sex'] = labelencoder.fit_transform(data['Sex'])
data['Embarked'] = labelencoder.fit_transform(data['Embarked'])
data['Title'] = labelencoder.fit_transform(data['Title'])

# Scale numerical features
scaler = StandardScaler()
data[['Age', 'Fare', 'FamilySize']] = scaler.fit_transform(data[['Age', 'Fare', 'FamilySize']])

# Separate features and target variable
X = data.drop('Survived', axis=1)
y = data['Survived']

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Display the shape of the training and testing sets
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)
